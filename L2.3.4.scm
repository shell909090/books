(define (get-symbol x) (car x))
(define (get-weight x) (cadr x))
(define (make-subtree left right)
  (list (list left right)
	(+ (get-weight left) (get-weight right))))
(define (split-most-low l)
  (define (min-node x y)
    (cond ((null? x) y)
  	  ((null? y) x)
  	  ((< (get-weight x) (get-weight y)) x)
  	  (else y)))
  (let ((low (reduce min-node '() l)))
    (cons low (filter (lambda (x) (not (eq? x low))) l))
    ))
(define (list-to-huffman l)
  (define (step-to-huffman ls)
    (let ((low1 (split-most-low ls)))
      (let ((low2 (split-most-low (cdr low1))))
  	(cons (make-subtree (car low1) (car low2)) (cdr low2))
  	)))
  (if (= (length l) 1)
      l
      (list-to-huffman (step-to-huffman l)))
  )
(list-to-huffman '((b 2) (e 10) (c 5) (a 1) (d 6)))