(define (last-pair l)
  (if (null? (cdr l))
      (car l)
      (last-pair (cdr l))
      ))
;; (last-pair (list 1 2 3 4 5))
(define (reverse l)
  (define (rev l t)
    (if (null? l)
	t
	(rev (cdr l) (cons (car l) t))
	))
  (rev l '())
  )
;; (reverse '(1 2 3 4 5))
(define (cmp-list l1 l2)
  (cond ((and (null? l1) (null? l2)) #t)
	((or (null? l1) (null? l2)) #f)
	((= (car l1) (car l2)) (cmp-list (cdr l1) (cdr l2))))
  )
(define (count-change amount coins)
  (cc amount coins))
(define (cc amount coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (cmp-list coins '())) 0)
        (else (+ (cc amount (cdr coins))
                 (cc (- amount (car coins)) coins)))
        ))
;; (count-change 100 '(1 5 10 25 50))
(define (same-even a l)
  (display l)
  (cond ((null? l) '())
	((= (remainder a 2) (remainder (car l) 2))
	 (cons (car l) (same-even a (cdr l))))
	(else (same-even a (cdr l)))
      ))
(define (same-partiy a . l)
  (same-even a l))
(same-partiy 1 3 4 5 6 7)
