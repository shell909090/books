(define (last-pair l)
  (if (null? (cdr l))
      (car l)
      (last-pair (cdr l))
      ))
;; (last-pair (list 1 2 3 4 5))
(define (reverse l)
  (define (rev l t)
    (if (null? l)
	t
	(rev (cdr l) (cons (car l) t))
	))
  (rev l '())
  )
;; (reverse '(1 2 3 4 5))
(define (cmp-list l1 l2)
  (cond ((and (null? l1) (null? l2)) #t)
	((or (null? l1) (null? l2)) #f)
	((= (car l1) (car l2)) (cmp-list (cdr l1) (cdr l2))))
  )
(define (count-change amount coins)
  (cc amount coins))
(define (cc amount coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (cmp-list coins '())) 0)
        (else (+ (cc amount (cdr coins))
                 (cc (- amount (car coins)) coins)))
        ))
;; (count-change 100 '(1 5 10 25 50))
(define (same-even a l)
  (display l)
  (cond ((null? l) '())
	((= (remainder a 2) (remainder (car l) 2))
	 (cons (car l) (same-even a (cdr l))))
	(else (same-even a (cdr l)))
      ))
(define (same-partiy a . l)
  (same-even a l))
;; (same-partiy 1 3 4 5 6 7)
(define (list-reverse l)
  (define (inner l t)
    (if (null? l)
	t
	(inner (cdr l) (cons (car l) t))))
  (inner l '()))
;; (list-reverse '(1 2 3 4 5))
(define (reverse t)
  (list-reverse (map list-reverse t)))
;; (reverse '((1 2) (3 4)))
(define (fringe t)
  (cond ((null? t) t)
	((pair? t) (append (fringe (car t)) (fringe (cdr t))))
	(else (cons t '()))
	))
;; (fringe '((1 2) (3 4)))
(define (make-mobile left right)
  (list left right))
(define (left-brench mobile)
  (car mobile))
(define (right-brench mobile)
  (car (cdr mobile)))
(define (make-brench length structure)
  (list length structure))
(define (brench-length brench)
  (car brench))
(define (brench-structure brench)
  (car (cdr brench)))
(define (total-weight mobile)
  (if (pair? mobile)
      (+ (total-weight (brench-structure (left-brench mobile)))
	 (total-weight (brench-structure (right-brench mobile))))
      mobile
      ))
(define (balance mobile)
  (if (not (pair? mobile))
      #t
      (and (balance (brench-structure (left-brench mobile)))
	   (balance (brench-structure (right-brench mobile)))
	   (= (* (brench-length (left-brench mobile))
		 (total-weight (brench-structure (left-brench mobile))))
	      (* (brench-length (right-brench mobile))
		 (total-weight (brench-structure (right-brench mobile)))))
	   )))
;; (balance (make-mobile (make-brench 2 3) (make-brench 3 2)))
(define (subset s)
  (if (null? s)
      (list '())
      (let ((rest (subset (cdr s))))
	(append rest
		(map (lambda (x) (cons (car s) x)) rest)))
      ))
;; (subset '(1 2 3))