(define (make-interval a b) (cons a b))
(define one (make-interval 1 1))
(define (lower-bound x) (car x))
(define (upper-bound x) (cdr x))
(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
  (make-interval (- (lower-bound x) (lower-bound y))
                 (- (upper-bound x) (upper-bound y))))
(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))
(define (div-interval x y)
  (if (and (< (lower-bound y) 0) (> (upper-bound y) 0))
      "error"
      (mul-interval x
		    (make-interval (/ 1.0 (upper-bound y))
				   (/ 1.0 (lower-bound y)))))
  )
(define (cmp-interval x y)
  (and (= (lower-bound x) (lower-bound y))
       (= (upper-bound x) (upper-bound y)))
  )
(define (mul-other x y)
  (let ((c1 (and (< (lower-bound x) 0) (< (upper-bound x) 0)))
	(c2 (and (< (lower-bound x) 0) (> (upper-bound x) 0)))
	(c3 (and (> (lower-bound x) 0) (> (upper-bound x) 0)))
	(c4 (and (< (lower-bound y) 0) (< (upper-bound y) 0)))
	(c5 (and (< (lower-bound y) 0) (> (upper-bound y) 0)))
	(c6 (and (> (lower-bound y) 0) (> (upper-bound y) 0))))
    (cond ((and c1 c4) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c1 c5) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (upper-bound y))))
	  ((and c1 c6) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c2 c4) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c2 c5) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c2 c6) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c3 c4) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c3 c5) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  ((and c3 c6) (make-interval (* (upper-bound x) (upper-bound y))
				      (* (lower-bound x) (lower-bound y))))
	  )
    )); oh, WTF, let it be
(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))
(define (make-center-percent d p)
  (make-interval (* d (- 1 p)) (* d (+ 1 p))))
(define (percent i)
  (/ (width i) (center i)))
(define (par1 r1 r2)
  (div-interval (mul-interval r1 r2)
		(add-interval r1 r2)))
(define (par2 r1 r2)
  (div-interval one
		(add-interval (div-interval one r1)
			      (div-interval one r2))))
;; (par1 (make-interval 1 10) (make-interval 1 2))
;; (par2 (make-interval 1 10) (make-interval 1 2))
(define (comp r1 r2 r3)
  (cons (mul-interval (add-interval r1 r2) r3)
	(add-interval (mul-interval r1 r3) (mul-interval r2 r3)))
  )
(display
 (comp (make-interval 5 10) (make-interval -7 20) (make-interval -2 -1)))
(newline)