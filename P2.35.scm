(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
	  (accumulate op initial (cdr sequence)))
      ))
(define (horner-eval x coefficient-sequence)
  (accumulate (lambda (this-coeff higher-terms)
		(+ (* higher-terms x) this-coeff))
	      0
	      coefficient-sequence)
  )
(display (horner-eval 2 '(1 3 0 5 0 3)))
(newline)
(define (count-leaves t)
  (accumulate + 0 (map (lambda (x) (if (pair? x) (count-leaves x) 1)) t)))
(display (count-leaves '((1 2) (3 4))))
(newline)
(define (accumulate-n op init seqs)
  (if (null? (car seqs))
      '()
      (cons (accumulate op init (map car seqs))
	    (accumulate-n op init (map cdr seqs)))
      ))
(display (accumulate-n + 0 '((1 2 3) (4 5 6) (7 8 9))))
(newline)
(define (fold-left op initial sequence)
  (define (inner op result rest)
    (if (null? rest)
	result
	(inner op (op result (car rest)) (cdr rest))
	))
  (inner op initial sequence))
(display (accumulate list '() '(1 2 3)))
(newline)
(display (fold-left list '() '(1 2 3)))
(newline)
(define (reverse1 sequence)
  (accumulate (lambda (x y) (append y (list x ))) '() sequence))
(define (reverse2 sequence)
  (fold-left (lambda (x y) (cons y x)) '() sequence))
(display (reverse1 '(1 2 3)))
(newline)
