(load "P2.07.scm")
;; 古怪的乘法
;; 分九种情况，每种乘法不超过两次
(define (mul-other x y)
  (let ((c1 (> (lower-bound x) 0))
	(c2 (and (< (lower-bound x) 0) (> (upper-bound x) 0)))
	(c3 (< (upper-bound x) 0))
	(c4 (> (lower-bound y) 0))
	(c5 (and (< (lower-bound y) 0) (> (upper-bound y) 0)))
	(c6 (< (upper-bound y) 0)))
    (cond ((and c1 c4)
	   (make-interval (* (lower-bound x) (lower-bound y))
			  (* (upper-bound x) (upper-bound y))))
	  ((and c1 c5)
	   (make-interval (* (upper-bound x) (lower-bound y))
			  (* (upper-bound x) (upper-bound y))))
	  ((and c1 c6)
	   (make-interval (* (upper-bound x) (lower-bound y))
			  (* (lower-bound x) (upper-bound y))))
	  ((and c2 c4)
	   (make-interval (* (lower-bound x) (upper-bound y))
			  (* (upper-bound x) (upper-bound y))))
	  ((and c2 c5)
	   (make-interval (min (* (lower-bound x) (upper-bound y))
			       (* (upper-bound x) (lower-bound y)))
			  (* (upper-bound x) (upper-bound y))))
	  ((and c2 c6)
	   (make-interval (* (upper-bound x) (lower-bound y))
			  (* (lower-bound x) (lower-bound y))))
	  ((and c3 c4)
	   (make-interval (* (lower-bound x) (upper-bound y))
			  (* (upper-bound x) (lower-bound y))))
	  ((and c3 c5)
	   (make-interval (* (lower-bound x) (upper-bound y))
			  (* (lower-bound x) (lower-bound y))))
	  ((and c3 c6)
	   (make-interval (* (upper-bound x) (upper-bound y))
			  (* (lower-bound x) (lower-bound y))))
	  )
    ))

(let ((fmt "~s * ~s = ~s~%")
      (c1 (make-interval 1 2))
      (c2 (make-interval -1 2))
      (c3 (make-interval -2 -1)))
  (format #t fmt c1 c1 (mul-other c1 c1))
  (format #t fmt c1 c2 (mul-other c1 c2))
  (format #t fmt c1 c3 (mul-other c1 c3))
  (format #t fmt c2 c1 (mul-other c2 c1))
  (format #t fmt c2 c2 (mul-other c2 c2))
  (format #t fmt c2 c3 (mul-other c2 c3))
  (format #t fmt c3 c1 (mul-other c3 c1))
  (format #t fmt c3 c2 (mul-other c3 c2))
  (format #t fmt c3 c3 (mul-other c3 c3)))
